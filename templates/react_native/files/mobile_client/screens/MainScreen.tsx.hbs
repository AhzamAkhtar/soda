import React, {useCallback, useEffect, useState} from 'react';
import {ScrollView, StyleSheet, Text, View ,SafeAreaView} from 'react-native';
import * as anchor from '@coral-xyz/anchor';
import {PublicKey} from '@solana/web3.js';
import {Section} from '../components/Section';
import ConnectButton from '../components/ConnectButton';
import AccountInfo from '../components/AccountInfo';
import {
  useAuthorization,
  Account,
} from '../components/providers/AuthorizationProvider';
import {Program} from '@coral-xyz/anchor';
import {useConnection} from '../components/providers/ConnectionProvider';
import DisconnectButton from '../components/DisconnectButton';
import RequestAirdropButton from '../components/RequestAirdropButton';
import {ProgramSource} from '../utils/type';
import {useCounterProgram} from '../hooks/useCounterProgram';
import {useAnchorWallet} from '../hooks/useAnchorWallet';

import {
 {{#each instructions}}
 Call_{{name}}_Instruction,
 {{/each}}
} 
from '../components/CallInstructionComponents/CallInstructions'

type CounterAccount = {
  count: anchor.BN;
  authority: PublicKey;
  bump: number;
};

export default function MainScreen() {
  const [counterValue, setCounterValue] = useState<string | null>(null);
  const {connection} = useConnection();
  const {authorizeSession, selectedAccount} = useAuthorization();
  const [balance, setBalance] = useState<number | null>(null);
  const anchorWallet = useAnchorWallet(authorizeSession, selectedAccount);
  const {counterProgram, counterPDA, counterProgramId} = useCounterProgram(
    connection,
    anchorWallet,
  );

  const fetchAndUpdateBalance = useCallback(
    async (account: Account) => {
      console.log('Fetching balance for: ' + account.publicKey);
      const fetchedBalance = await connection.getBalance(account.publicKey);
      console.log('Balance fetched: ' + fetchedBalance);
      setBalance(fetchedBalance);
    },
    [connection],
  );

   const fetchAndUpdateCounter = useCallback(
    async (program: Program<ProgramSource>) => {
      const counterAccount: CounterAccount =
        await program.account.counter.fetch(counterPDA);
      setCounterValue(counterAccount.count.toString());
    },
    [counterPDA],
  );

  useEffect(() => {
    if (!selectedAccount) {
      return;
    }
    fetchAndUpdateBalance(selectedAccount);
  }, [fetchAndUpdateBalance, selectedAccount]);

      // Auto fetch count
    useEffect(() => {
      if (!counterProgram) {
        return;
      }
      fetchAndUpdateCounter(counterProgram);
    }, [fetchAndUpdateCounter, counterProgram]);

  return (
    <>
      <View style={styles.mainContainer}>
        <ScrollView contentContainerStyle={styles.scrollContainer}>
          {selectedAccount ? (
            <>
            <SafeAreaView>
              <ScrollView style={styles.scroolView}>
              <Section title="Account Info">
                <AccountInfo
                  selectedAccount={selectedAccount}
                  balance={balance}
                />
                <RequestAirdropButton
                  selectedAccount={selectedAccount}
                  onAirdropComplete={async (account: Account) =>
                    await fetchAndUpdateBalance(account)
                  }
                />
               {{#each instructions}}
               <View style = {styles.button}>
                <Call_{{name}}_Instruction
                onComplete={(counterAccount: CounterAccount) => {
                setCounterValue(counterAccount.count.toString());
                }}
                anchorWallet={anchorWallet}
                />
                </View>
              {{/each}}
              </Section>
               </ScrollView>
              </SafeAreaView>
            </>
          ) : null}
        </ScrollView>
        {selectedAccount ? (
          <DisconnectButton title="Disconnect wallet" />
        ) : (
          <ConnectButton title="Connect wallet" />
        )}
      </View>
    </>
  );
}

const styles = StyleSheet.create({
  mainContainer: {
    height: '100%',
    padding: 16,
    flex: 1,
  },
  scrollContainer: {
    height: '100%',
  },
  buttonGroup: {
    flexDirection: 'column',
    paddingVertical: 4,
  },
  scroolView: {
    marginBottom: 10,
  },
  textSubHeading : {
    fontSize: 18,
    marginTop : 10,
    fontWeight: 'bold',
    color : 'white'
  },
  button : {
    marginTop : 20
  }
});
